<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://kangwonwoo.github.io/</id><title>Klog 신입 프로그래머의 공부 블로그</title><subtitle>GitHub Pages, Tech Blog</subtitle> <updated>2022-11-09T18:16:07+09:00</updated> <author> <name>강원우(Kang Wonwoo)</name> <uri>https://kangwonwoo.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://kangwonwoo.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://kangwonwoo.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2022 강원우(Kang Wonwoo) </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>C#6 | 알고리즘 문제 풀이</title><link href="https://kangwonwoo.github.io/posts/C-06-%EA%B8%B0%EC%B4%88-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4/" rel="alternate" type="text/html" title="C#6 | 알고리즘 문제 풀이" /><published>2022-11-08T00:00:00+09:00</published> <updated>2022-11-09T18:15:43+09:00</updated> <id>https://kangwonwoo.github.io/posts/C-06-%EA%B8%B0%EC%B4%88-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4/</id> <content src="https://kangwonwoo.github.io/posts/C-06-%EA%B8%B0%EC%B4%88-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4/" /> <author> <name>강원우(Kang Wonwoo)</name> </author> <category term="C#" /> <category term="03.Algorithm" /> <summary> 정렬 알고리즘 (Algorithm) 정렬 알고리즘 문제 풀이 백준 2750번 : 수 정렬하기 단순 정렬 int array[1001]; int main(void) { int number, i, j, min, index, temp; scanf("%d", &amp;amp;number); for(i = 0; i &amp;lt; number; i++) { scanf("%d", &amp;amp;array[i]) } for(i = 0; i &amp;lt; number; i++) { min = 1001; for(j = i; j &amp;lt; number; j++) { if(min &amp;gt; array[j]) { min = array[j]; ... </summary> </entry> <entry><title>C#5 | Quick Sort</title><link href="https://kangwonwoo.github.io/posts/C-05-Quick-Sort(%ED%80%B5-%EC%A0%95%EB%A0%AC)-%EB%B3%B5%EC%82%AC%EB%B3%B8/" rel="alternate" type="text/html" title="C#5 | Quick Sort" /><published>2022-11-08T00:00:00+09:00</published> <updated>2022-11-08T00:00:00+09:00</updated> <id>https://kangwonwoo.github.io/posts/C-05-Quick-Sort(%ED%80%B5-%EC%A0%95%EB%A0%AC)-%EB%B3%B5%EC%82%AC%EB%B3%B8/</id> <content src="https://kangwonwoo.github.io/posts/C-05-Quick-Sort(%ED%80%B5-%EC%A0%95%EB%A0%AC)-%EB%B3%B5%EC%82%AC%EB%B3%B8/" /> <author> <name>강원우(Kang Wonwoo)</name> </author> <category term="C#" /> <category term="03.Algorithm" /> <summary> 정렬 알고리즘 (Algorithm) 퀵 정렬 (Quick Sort) 대표적인 ‘분할 정복’ 알고리즘 하나의 큰 문제를 두 개의 작은 문제로 분할하는 식 특정한 값을 기준으로 큰 숫자와 작은 숫자를 서로 교환한 뒤에 배열을 반으로 나눈다. 피벗 값을 설정 Cycle 1 기본 3 7 8 1 5 9 6 10 2 4 -&amp;gt; 3을 피벗으로 정한다 첫번째 3 2 8 1 5 9 6 10 7 4 -&amp;gt; 왼쪽에서는 3보다 큰 값을 찾는다 = 7 ↑ ↑ -&amp;gt; 오른쪽에서는 3보다 작은 값을 찾는다 = 2 두번째 3 2 1 8 5 9 6 10 7 4 ↑ ↑ 세번째 1 2 3 8 5 9 6 ... </summary> </entry> <entry><title>C#4 | Insertion Sort</title><link href="https://kangwonwoo.github.io/posts/C-04-Insertion-Sort(%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC)/" rel="alternate" type="text/html" title="C#4 | Insertion Sort" /><published>2022-11-02T00:00:00+09:00</published> <updated>2022-11-08T17:52:18+09:00</updated> <id>https://kangwonwoo.github.io/posts/C-04-Insertion-Sort(%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC)/</id> <content src="https://kangwonwoo.github.io/posts/C-04-Insertion-Sort(%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC)/" /> <author> <name>강원우(Kang Wonwoo)</name> </author> <category term="C#" /> <category term="03.Algorithm" /> <summary> 정렬 알고리즘 (Algorithm) 삽입 정렬 (Insertion Sort) 각 숫자를 적절한 위치에 삽입하는 방법으로 문제 해결 필요할 때만 위치를 바꾸게 된다 Cycle 1 기본 1 10 5 8 7 6 4 3 2 9 첫번째 1 5 10 8 7 6 4 3 2 9 ↑ 두번째 1 5 8 10 7 6 4 3 2 9 ↑ · · · 아홉번째 1 5 8 7 6 4 3 2 9 10 ↑ Cycle 2 기본 1 5 8 7 6 4 3 2 9 10 첫번째 1 5 7 8 6 4 3 2 9 10 ↑ 두번째 1 5 7 6 8 4 3 2 9 10 ↑ · · · 다섯번째 1 5 7 6 4 3 2 8 9 10 ↑ ... </summary> </entry> <entry><title>C# | Packet</title><link href="https://kangwonwoo.github.io/posts/TCP-IP-01-Packet/" rel="alternate" type="text/html" title="C# | Packet" /><published>2022-11-01T00:00:00+09:00</published> <updated>2022-11-03T09:33:44+09:00</updated> <id>https://kangwonwoo.github.io/posts/TCP-IP-01-Packet/</id> <content src="https://kangwonwoo.github.io/posts/TCP-IP-01-Packet/" /> <author> <name>강원우(Kang Wonwoo)</name> </author> <category term="C#" /> <category term="04.TCP/IP" /> <summary> 데이터 패킷(Packet) 패킷은 패키지와 덩어리를 뜻하는 버킷의 합성어로 통신망을 통해 전송하기 쉽도록 자른 데이터의 전송 단위 본래 패킷은 소포를 뜻하는 용어인데 우체국에서 화물을 적당한 덩어리로 나누어 행선지를 표시하는 붙이는 작업을 데이터 통신에 접목한 용어로 사용하고 있다. 데이터를 전송할 때 송신측과 수신측에 하나의 단위가 되어 전송되는 집합체를 뜻 하는데 쉽게 말해서 우리가 인터넷을 이용해 주고 받는 이메일, 채팅 메시지, 금융 거래 내용 등 다양한 데이터의 내용을 작은 단위로 쪼갠 데이터로 이해할 수 있다. 패킷은 헤더, 데이터, 테일러로 구성 이미 헤더에는 수신처의 인터넷 주소와 순서 등이, 테일러에는 에러 정보가 ... </summary> </entry> <entry><title>C#3 | Bubble Sort</title><link href="https://kangwonwoo.github.io/posts/C-03-Bubble-Sort(%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC)-%EB%B3%B5%EC%82%AC%EB%B3%B8/" rel="alternate" type="text/html" title="C#3 | Bubble Sort" /><published>2022-11-01T00:00:00+09:00</published> <updated>2022-11-08T17:52:18+09:00</updated> <id>https://kangwonwoo.github.io/posts/C-03-Bubble-Sort(%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC)-%EB%B3%B5%EC%82%AC%EB%B3%B8/</id> <content src="https://kangwonwoo.github.io/posts/C-03-Bubble-Sort(%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC)-%EB%B3%B5%EC%82%AC%EB%B3%B8/" /> <author> <name>강원우(Kang Wonwoo)</name> </author> <category term="C#" /> <category term="03.Algorithm" /> <summary> 정렬 알고리즘 (Algorithm) 버블 정렬 (Bubble Sort) 숫자를 오름차순으로 정렬 하는 것 옆에 있는 값과 비교하여 더 작은 값을 반복적으로 앞으로 보내는 정렬 구현은 가장 쉽지만 가장 비효율적 Cycle 1 기본 1 10 5 8 7 6 4 3 2 9 첫번째 1 5 10 8 7 6 4 3 2 9 ↑ 두번째 1 5 8 10 7 6 4 3 2 9 ↑ · · · 아홉번째 1 5 8 7 6 4 3 2 9 10 ↑ Cycle 2 기본 1 5 8 7 6 4 3 2 9 10 첫번째 1 5 7 8 6 4 3 2 9 10 ↑ 두번째 1 5 7 6 8 4 3 2 9 10 ↑ · · · 다섯번째 1 5 7 6... </summary> </entry> </feed>
