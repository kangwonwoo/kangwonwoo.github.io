[ { "title": "C#6 | 알고리즘 문제 풀이", "url": "/posts/C-06-%EA%B8%B0%EC%B4%88-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4/", "categories": "C#, 03.Algorithm", "tags": "C#, Algorithm", "date": "2022-11-08 00:00:00 +0900", "snippet": "정렬 알고리즘 (Algorithm)정렬 알고리즘 문제 풀이백준 2750번 : 수 정렬하기 단순 정렬int array[1001];int main(void){ int number, i, j, min, index, temp; scanf(\"%d\", &amp;number); for(i = 0; i &lt; number; i++) { scanf(\"..." }, { "title": "C#5 | Quick Sort", "url": "/posts/C-05-Quick-Sort(%ED%80%B5-%EC%A0%95%EB%A0%AC)-%EB%B3%B5%EC%82%AC%EB%B3%B8/", "categories": "C#, 03.Algorithm", "tags": "C#, Algorithm", "date": "2022-11-08 00:00:00 +0900", "snippet": "정렬 알고리즘 (Algorithm)퀵 정렬 (Quick Sort) 대표적인 ‘분할 정복’ 알고리즘 하나의 큰 문제를 두 개의 작은 문제로 분할하는 식 특정한 값을 기준으로 큰 숫자와 작은 숫자를 서로 교환한 뒤에 배열을 반으로 나눈다. 피벗 값을 설정Cycle 1기본3 7 8 1 5 9 6 10 2 4 -&gt;..." }, { "title": "C#4 | Insertion Sort", "url": "/posts/C-04-Insertion-Sort(%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC)/", "categories": "C#, 03.Algorithm", "tags": "C#, Algorithm", "date": "2022-11-02 00:00:00 +0900", "snippet": "정렬 알고리즘 (Algorithm)삽입 정렬 (Insertion Sort) 각 숫자를 적절한 위치에 삽입하는 방법으로 문제 해결 필요할 때만 위치를 바꾸게 된다Cycle 1기본1 10 5 8 7 6 4 3 2 9첫번째1 5 10 8 7 6 4 3 2 9 ↑ 두번째1 5 8 10 7 6 4 3 2 9 ↑···아홉번째1 5 8 7 6 4 3 2..." }, { "title": "C# | Packet", "url": "/posts/TCP-IP-01-Packet/", "categories": "C#, 04.TCP/IP", "tags": "C#, Unity", "date": "2022-11-01 00:00:00 +0900", "snippet": "데이터 패킷(Packet) 패킷은 패키지와 덩어리를 뜻하는 버킷의 합성어로 통신망을 통해 전송하기 쉽도록 자른 데이터의 전송 단위 본래 패킷은 소포를 뜻하는 용어인데 우체국에서 화물을 적당한 덩어리로 나누어행선지를 표시하는 붙이는 작업을 데이터 통신에 접목한 용어로 사용하고 있다. 데이터를 전송할 때 송신측과 수신측에..." }, { "title": "C#3 | Bubble Sort", "url": "/posts/C-03-Bubble-Sort(%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC)-%EB%B3%B5%EC%82%AC%EB%B3%B8/", "categories": "C#, 03.Algorithm", "tags": "C#, Algorithm", "date": "2022-11-01 00:00:00 +0900", "snippet": "정렬 알고리즘 (Algorithm)버블 정렬 (Bubble Sort) 숫자를 오름차순으로 정렬 하는 것 옆에 있는 값과 비교하여 더 작은 값을 반복적으로 앞으로 보내는 정렬 구현은 가장 쉽지만 가장 비효율적Cycle 1기본1 10 5 8 7 6 4 3 2 9첫번째1 5 10 8 7 6 4 3 2 9 ↑ 두번째1 5 8 10 7 6 4 3 2 9..." }, { "title": "C#2 | Algorithm", "url": "/posts/C-02-Selection-Sort(%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC)/", "categories": "C#, 03.Algorithm", "tags": "C#, Algorithm", "date": "2022-11-01 00:00:00 +0900", "snippet": "정렬 알고리즘 (Algorithm)선택 정렬 (Selection Sort) 가장 작은 숫자부터 순차적으로 선택해서 제일 앞으로 보낸다.기본1 10 5 8 7 6 4 3 2 9첫번째1 2 5 8 7 6 4 3 10 9 ↑ 두번째1 2 3 8 7 6 4 5 10 9 ↑···아홉번째1 2 3 4 5 6 7 8 9 10선택 정렬 공식int main ..." }, { "title": "C#1 | Algorithm", "url": "/posts/C-01-Algorithm/", "categories": "C#, 03.Algorithm", "tags": "C#, Algorithm", "date": "2022-11-01 00:00:00 +0900", "snippet": "알고리즘 (Algorithm) 문제를 해결하는 절차 입력, 출력, 유한성, 명백성, 효과성을 맘족해야 함 분석을 통해 좋고 나쁨을 평가할 수 있다. 기초 프로그래밍과 자료 구조를 공부한 이후에 배우면 좋음 논리이며 수학이고 실질적인 개발에 적용되는 기초적인 아이디어알고리즘 (Algorithm) 사용 개발의 전체 과정 프로그램..." }, { "title": "Arduino | Arduino", "url": "/posts/C-01-C-%EC%9D%98%EA%B0%9C%EB%85%90/", "categories": "Arduino", "tags": "Arduino", "date": "2022-10-21 00:00:00 +0900", "snippet": "Arduino(UNO) 개념 : 아두이노는 오픈 소스(Open Source)를 기반으로 한 단일보드인 마이크로컨트롤러(Microcontroller)로 완성된 보드와 관련 개발 도구 및 환경을 말합니다. 2005년 이탈리아의 IDII에서 하드웨어 익숙지 않은 학생들이 자신들의 디자인 작품을 손쉽게 제어할 수 있도록 하기 위해 고안된 아두이노는 처음에 ..." }, { "title": "C#9 | Coroutine과 Thread", "url": "/posts/C-09-Coroutin/", "categories": "C#, 02.Basic", "tags": "C#, Unity", "date": "2022-10-07 00:00:00 +0900", "snippet": "Coroutine(코루틴)과 Thread Coroutine 장점 : 병렬로 데이터를 처리하는 것처럼 만들어 준다 ex) using System.Collections;using System.Collections.Generic;using UnityEngine;public class Co : MonoBehaviour{ // St..." }, { "title": "C#8 | ref와 out", "url": "/posts/C-08-ref%EC%99%80-out/", "categories": "C#, 02.Basic", "tags": "C#, Unity", "date": "2022-10-07 00:00:00 +0900", "snippet": "ref와 out 매개 변수가 참조로 전달되었음을 나타냄 참조, Refrence, Pointerref 값의 주소가 채워져 있어야 사용가능class People{ string name; public change_name(string myname) { myname = \"홍길동\" }} ex 1) Call by Val..." }, { "title": "C#7 | Generics", "url": "/posts/C-07-Generics/", "categories": "C#, 02.Basic", "tags": "C#, Unity", "date": "2022-10-07 00:00:00 +0900", "snippet": "Generics(제네릭) 일반적으로 Class를 정의할 때, 클래스 내의 모든 Data Type을 지정해 주게 된다. 어떤 경우는 Class의 거의 모든 부분이 동일한데 일부 Data Type만이 다른경우가 있을 수 있다. ex)public class MathPlusInt{ int hap; public void set_dat..." }, { "title": "C#6 | Struct", "url": "/posts/C-06-%EA%B5%AC%EC%A1%B0%EC%B2%B4/", "categories": "C#, 02.Basic", "tags": "C#, Unity", "date": "2022-10-07 00:00:00 +0900", "snippet": "Struct (구조체) 사용자 정의 데이터 유형(Data Type)으로 int, double 등과 같은 기본적으로 제공되는 변수 유형이 아닌 새로운 유형 여러가지 유형을 사용하기 위해 사용자가 직접 만들어 사용 c#에서 구조체는 일반 변수와 같이 값 형식의 데이터 형식 선언되는 위치에 따라 범위가 달라진다.struct 구조체이름{}구조체이름 t..." }, { "title": "C# Grammar#14 | Reflection", "url": "/posts/C-Grammar-14/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-10-06 00:00:00 +0900", "snippet": "Reflection(리플렉션) Unity를 C#으로 개발하다보면 “리플렉션”, 즉 reflection 이라는 단어를 종종 듣는다. 이는 C/C++에서 넘어온 개발자들이라면 다소 생소한 단어일 수 있다. Java는 java.lang.reflection 이라는 패키지로 reflection을 지원하고, C#에서는 System.reflection 네임스페..." }, { "title": "C#5 | 데이터 형변환", "url": "/posts/C-05-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%98%95%EB%B3%80%ED%99%98/", "categories": "C#, 02.Basic", "tags": "C#, Grammar, Unity", "date": "2022-10-06 00:00:00 +0900", "snippet": "데이터의 종류Booleanbool b;b = true;b = false; true, false 판별하는데 1 bit만 필요하지만 boolean 타입이 1 byte 크기인 이유는, 컴퓨터는 1 byte 단위로 일을 하기 때문에 맞춰 준 것 뿐이다. True → 00000001 false → 00000000 실수 (f..." }, { "title": "C#4 | Object Oriented Programming", "url": "/posts/C-04-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/", "categories": "C#, 02.Basic", "tags": "C#, Grammar, Unity", "date": "2022-10-06 00:00:00 +0900", "snippet": "Object Oriented Programming(객체 지향) 객체 지향 프로그래밍(Object-Oriented Programming)은 객체(Object)를 중심으로 프로그램을 설계, 개발해 나가는 것 객체 지향 프로그래밍의 가장 큰 특징은 클래스를 이용해 함수(처리 부분), 변수(데이터 부분)를 하나로 묶어 객체(Instance)로 만들어 사용..." }, { "title": "C#3 | 정수", "url": "/posts/C-03-%EC%A0%95%EC%88%98/", "categories": "C#, 02.Basic", "tags": "C#, Unity", "date": "2022-10-06 00:00:00 +0900", "snippet": "정수 형식using System;namespace ConsoleApp1{ class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } }} Main 함수 프로젝트 내에..." }, { "title": "C#2 | Unity C# 개념", "url": "/posts/C-02-UnityC-%EC%9D%98%EA%B0%9C%EB%85%90/", "categories": "C#, 02.Basic", "tags": "C#, Unity", "date": "2022-10-05 00:00:00 +0900", "snippet": "Unity C#1. namespace 공간내에 있는 클래스는 using으로 선언 가능ex) 함수namespace MyMathClass{ public class MathPluse { public int plus(int a, int b) // 함수 { return a + b; } ..." }, { "title": "C#1 | C# 개념", "url": "/posts/C-01-C-%EC%9D%98%EA%B0%9C%EB%85%90/", "categories": "C#, 02.Basic", "tags": "C#, Unity", "date": "2022-10-05 00:00:00 +0900", "snippet": "C# 마이크로소프트사에서 개발한 객체지향 프로그래밍 언어 프로그래밍언어는 CPU(한가지 프로그램만 실행 가능)를 제어하는 방법을 배우는 것ex) 컴퓨터( 롬바이오스 - 가장 먼저 실행해서 연결 상태를 확인 ↓ 하드디스크 - 저장소 ↓ 메모리 - 메모장 ↓ CPU - 메모리에 저장된 내용을 연산 ..." }, { "title": "C# Grammar#13 | Exception", "url": "/posts/C-Grammar-13/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-30 00:00:00 +0900", "snippet": "Exception(예외처리) 게임에선 예외처리를 잘 하지 않는 편이다. 그냥 크래쉬 된 체로 냅두고 문제가 되는 코드 자체를 나중에 수정하는게 보통이다. 예외처리가 큰 의미가 없기 때문이다. 그래도 게임이라도 네트워크 오류 같은 문제는 예외 처리가 필요함! 예외가 발생하는 상황 예시 0 으로 나눌 때 잘못된 메모리를 참조..." }, { "title": "C# Grammar#12 | Event", "url": "/posts/C-Grammar-12/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-30 00:00:00 +0900", "snippet": "Event(이벤트) 이벤트를 발생시키는 쪽이 하나라면 반응하는 쪽은 하나 이상이 될 수 있다. 어떤 이벤트가 발생하면 그 이벤트에 등록해 둔 모든 함수들이 자동으로 발동된다. 등록되있는 함수들은 언제 발동될지, 어떻게 발동될지 관심이 없다. 이벤트를 발생시키는 측도 자신에게 어떤 함수들이 등록되어있는지 관심이 없다. ..." }, { "title": "C# Grammar#11 | Property", "url": "/posts/C-Grammar-11/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-30 00:00:00 +0900", "snippet": "Property(프로퍼티) 프로퍼티(Property)는 속성이라는 의미를 지니고 있다. 멤버 변수를 속성이라고도 하는데 정보 은닉을 위해 private로 선언을 하면 get, set 메소드를 구현해야 한다. 이를 편리하게 해주는 것이 C#의 property이다. C# 프로퍼티는 간단하고 유연성있게 전용 필드의값을 읽거나 쓰는 메커니즘을 제공한다...." }, { "title": "C# Grammar#10 | Struct", "url": "/posts/C-Grammar-10/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-30 00:00:00 +0900", "snippet": "Struct(구조체) 구조체란 클래스와 같은 사용자 정의 데이터형입니다. 사용자 정의 데이터형란 기본 데이터 형식과 메소드로 구성 된 복합 데이터형을 의미합니다. 구조체는 클래스와 비슷한 부분이 많다. 하지만, 가장 큰 차이는 클래스는 참조 형식이고, 구조체는 값 형식입니다. 구조체는 클래스와 같이 메서드, 프로퍼티 등 거의 비슷한 구조를 가..." }, { "title": "C# Grammar#09 | Anonymous Method, Delegate, Lambda", "url": "/posts/C-Grammar-09/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-30 00:00:00 +0900", "snippet": "Anonymous Method(무명 메서드) 익명 메소드란 이름이 없는 메소드를 말한다. 익명 메소드는 delegate 키워드를 이용하여 선언한다. 대리자 인스턴스 = delegate(매개변수 목록) { // 실행하고자 하는 코드 }; 익명 메소드는 자신을 참..." }, { "title": "C# Grammar#08 | IEnumerator, IEnumerable 및 yield", "url": "/posts/C-Grammar-08/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-30 00:00:00 +0900", "snippet": "IEnumerator(열거자) : 열거자를 구현하는데 필요한 인터페이스 데이터를 리턴(Getter)하는 열거자 클래스 내부의 컬렉션에 대해 반복할 수 있도록 도와준다. public interface IEnumerator{ object Current { get; } bool MoveNext(); void Reset();} 반복..." }, { "title": "C# Self Study#01 | 슬라이더를 이용한 음량 조절, 키(신체) 조절과 게임 종료 버튼 구현", "url": "/posts/Unity-SelfStudy-01/", "categories": "Unity, 01.SelfStudy", "tags": "C#, SelfStudy, Unity", "date": "2022-09-22 00:00:00 +0900", "snippet": "음량 조절 (Script없이 구현하는 법) 음량을 조절할 슬라이더에 현재 유니티 Scene에서 사용중인 Light를 On Value Changed에 목록을 추가한 뒤 드래그해서 끌어다 놓는다. No.Function을 클릭후 Light에서 intensity를 찾아 넣어준다. 슬라이더에 값이 제대로 작동하는지 확인해본다.키(신체) 조절 Main C..." }, { "title": "C# Grammar#07 | Audio", "url": "/posts/C-Grammar-07/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-21 00:00:00 +0900", "snippet": "Audio Listener(오디오 리스너) 오디오 리스너는 마이크와 같은 장치로 오디오 소스(Audio Source)로 부터 정보를 받아 사운드를 재생하는 역할을 한다. 프로젝트 생성 시 Main Camera에 추가되어 있으며, 수정을 위한 옵션 설정을 제공하지 않는다. 오디오 리스너를 제거하거나, 비활성 시에는 사운드를 재생하지 않는다. 오디오 ..." }, { "title": "C# Grammar#06 | Convert.Toint32()", "url": "/posts/C-Grammar-06/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-19 00:00:00 +0900", "snippet": "Convert 먼저 Convert 의 정의는 “기본 데이터 형식을 다른 기본 데이터 형식으로 변환한다.” 라고 합니다. Boolean, Char, Byte, Int, Double, Decimal, String, DateTime 등등.. 이러한 형식들을 지원한다고 합니다. Convert.ToInt32(string s) 메소드는 문자열로 표현된 수를 ..." }, { "title": "Jekyll Chirpy theme Setting", "url": "/posts/C-Tip-Dictionary/", "categories": "Tech Tip, Github Pages", "tags": "jekyll, Github Pages, Chripy", "date": "2022-09-16 00:00:00 +0900", "snippet": "참고 사이트 Chirpy 테마 커스터마이징 By 하얀눈길 푸쉬 전 로컬에서 확인하기 ＃Git Bash$ jekyll serve＃Web Browserhttp://localhost:4000/ GitHub Pages Source _config.yml : 블로그 기본 환경세팅 _data : 왼쪽 사이드바 ..." }, { "title": "C# Grammar#0x | Dictionary", "url": "/posts/C-Grammar-05/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-16 00:00:00 +0900", "snippet": "DictionaryDictionary를 List로 변환 먼저 Dictionary를 List로 변환하는 방법 Dictionary는 키(Key)와 값(Value)로 구성되어 있습니다. Dictionary를 리스트로 변환하려면 Dictionary의 키를 담을 List와 Dictionary의 값을 담을 List가 필요합니다.Dictionary를 List..." }, { "title": "C# Grammar#04 | while, do while", "url": "/posts/C-Grammar-04/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-08 00:00:00 +0900", "snippet": "whileC# while 문은 while 조건식이 true인 동안 계속 while 블럭을 실행할 때 사용한다. 다음 예제는 while문을 사용하여 1부터 10까지 숫자를 콘솔에 출력하는 코드이다. 아래에서 i가 11이 되면 while 조건식이 false가 되어 while 루프를 빠져나오게 된다.static void Main(string[] args){..." }, { "title": "C# Grammar#03 | for(반복 구문) vs foreach(배열 반복문)", "url": "/posts/C-Grammar-03/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-08 00:00:00 +0900", "snippet": "for(반복 구문)C# for 문은 루프 안에 있는 문장들을 반복적으로 실행할 때 사용한다. for 루프는 일반적으로 카운터 변수를 이용해 일정 범위 동안 for 루프 안의 블럭을 실행한다.다음 예제는 0부터 9까지 총 10번 콘솔 출력을 반복하는 코드이다.class Program{ static void Main(string[] args) ..." }, { "title": "C# Grammar#02 | enum", "url": "/posts/C-Grammar-02/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-08 00:00:00 +0900", "snippet": "enum 열거형 -&gt; 같은 종류의 상수 모음 상수나 변수를 사용하는 이유 상수 리터럴을 통한 하드 코딩은 그 의미를 알기 쉽지 않고 리팩토링이 어렵기 때문에. enum 열거형을 사용하는 이유 상수이므로 의미를 알기 쉽다. 연관된 것들을 하나의 enum 으로 묶기 때문에 그룹화를 할 수 있다..." }, { "title": "C# Grammar#01 | Switch", "url": "/posts/C-Grammar-01/", "categories": "C#, 01.Structure", "tags": "C#, Grammar, Unity", "date": "2022-09-08 00:00:00 +0900", "snippet": "Switch if - else 반복 줄임 가독성 높임 switch(n) 인수로는 기본적으로 정수와 문자를 넣을 수 있음 최근 C# 에서는 다른 타입의 객체도 넣을 수 있게끔 개선됐다. int choice = 0;switch(choice){ case 0: Console.WriteLine(\"가위\"); ..." }, { "title": "Jekyll Chirpy theme Setting", "url": "/posts/Jekyll-Chirpy-theme-Setting/", "categories": "Tech Tip, Github Pages", "tags": "jekyll, Github Pages, Chripy", "date": "2022-08-25 00:00:00 +0900", "snippet": "참고 사이트 Chirpy 테마 커스터마이징 By 하얀눈길 푸쉬 전 로컬에서 확인하기 ＃Git Bash$ jekyll serve＃Web Browserhttp://localhost:4000/ GitHub Pages Source _config.yml : 블로그 기본 환경세팅 _data : 왼쪽 사이드바 ..." } ]
